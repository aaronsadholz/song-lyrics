#!/usr/bin/env python

"""
Joins musixmatch song extra data (location and year)
"""
import os.path as path
import logging
import argparse
import numpy as np
import pandas as pd


def main():
    logger = logging.getLogger(__name__)
    logging.basicConfig(level=logging.INFO)

    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('path_to_data', type=str,
                        help='Path to unique_tracks.feather, '
                             'unique_artists.feather, '
                             'artist_location.feather and '
                             'tracks_per_year.feather files')
    parser.add_argument('path_to_output', type=str,
                        help='Output path for the feather file')

    args = parser.parse_args()
    path_to_data = args.path_to_data
    path_to_output = args.path_to_output

    logger.info('Loading data...')

    mxm = pd.read_feather('data/transform/mxm_dataset.feather')
    mxm_tracks = mxm[['track_id']]

    unique_tracks = pd.read_feather(path.join(path_to_data,
                                    'unique_tracks.feather'))
    unique_artists = pd.read_feather(path.join(path_to_data,
                                     'unique_artists.feather'))
    artist_location = pd.read_feather(path.join(path_to_data,
                                      'artist_location.feather'))
    tracks_per_year = pd.read_feather(path.join(path_to_data,
                                      'tracks_per_year.feather'))

    df = mxm_tracks.merge(unique_tracks, how='left', on='track_id')
    df = df.merge(tracks_per_year[['track_id', 'year']], how='left')

    df = df.merge(unique_artists[['artist', 'artist_id']], how='left',
                  left_on='artist_name', right_on='artist')
    df = df.merge(artist_location[['artist_id', 'latitude', 'longitude',
                                   'location']], how='left', on='artist_id')

    nas = df.apply(lambda c: np.sum(c.isna()), axis=0) / df.shape[0] * 100

    logger.info('NAs stats: {}'.format(nas))

    # save this
    df = df.reset_index()
    df.drop('index', axis=1, inplace=True)

    logger.info('Saving file in {}'.format(path_to_output))
    df.to_feather(path_to_output)


if __name__ == "__main__":
    main()
