#!/usr/bin/env python
"""
Export artist terms
"""
import logging
import sqlite3
import argparse
import numpy as np
import pandas as pd


def main():
    logger = logging.getLogger(__name__)
    logging.basicConfig(level=logging.INFO)

    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('path_to_terms_db', type=str,
                        help='Path to SQLite database (artist_term.db)')
    parser.add_argument('track_metadata', type=str,
                        help='Path to musixmatch dataset')
    parser.add_argument('path_to_output', type=str,
                        help='Output path for the feather file')

    args = parser.parse_args()
    path_to_terms_db = args.path_to_terms_db
    track_metadata = args.track_metadata
    path_to_output = args.path_to_output

    logger.info('Loading data...')

    metadata = pd.read_feather(track_metadata)
    artists = pd.DataFrame(dict(artist_id=metadata.artist_id.unique()))

    conn = sqlite3.connect(path_to_terms_db)
    artist_mbtag = pd.read_sql("SELECT * FROM artist_mbtag", conn)

    # this one contains a lot of tags per artist, ignoring...
    # artist_term = pd.read_sql("SELECT * FROM artist_term", conn)

    # terms = artist_mbtag.merge(artist_term, how='outer', on='artist_id')

    logger.info('Subsetting songs to match the musixmatch dataset...')
    df = artists.merge(artist_mbtag, how='left', on='artist_id')

    nas = df.apply(lambda c: np.sum(c.isna()), axis=0) / df.shape[0] * 100
    logger.info('NA stats: %s', nas)

    # save this
    df = df.reset_index()
    df.drop('index', axis=1, inplace=True)

    logger.info('Saving file in %s', path_to_output)
    df.to_feather(path_to_output)

    conn.close()


if __name__ == "__main__":
    main()
