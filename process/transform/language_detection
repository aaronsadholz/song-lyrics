#!/usr/bin/env python
"""
Detect language, generates a feather file with a track_id and language columns
"""
import argparse
import logging
from functools import reduce
import numpy as np
import pandas as pd
from langdetect import detect


def main():
    logger = logging.getLogger(__name__)
    logging.basicConfig(level=logging.INFO)

    # use docstring at the top as description for the script
    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument('path_to_data', type=str,
                        help='Path to bag of words data')
    parser.add_argument('path_to_output', type=str,
                        help='Path to output file')

    args = parser.parse_args()
    path_to_data = args.path_to_data
    path_to_output = args.path_to_output

    logger.info('Loading data...')

    data = pd.read_feather(path_to_data)

    words = np.array([word for word in list(data) if word != 'track_id'])

    def detect_language(row):
        if int(row.name) % 1000 == 0:
            logger.info('Detected language for %i/%i songs',
                        row.name, len(data))

        words_with_counts = words[row > 0]

        if len(words_with_counts):
            sentence = reduce(lambda x, y: x+' '+y, words_with_counts)
            try:
                return detect(sentence)
            except Exception:
                return np.nan
        else:
            return np.nan

    language = data.loc[:, words].apply(detect_language, axis=1)
    track_id = data.track_id

    output = pd.DataFrame({'track_id': track_id, 'language': language})
    output = output[['track_id', 'language']]

    logger.info('Saving file in {}'.format(path_to_output))
    output.to_feather(path_to_output)


if __name__ == "__main__":
    main()
