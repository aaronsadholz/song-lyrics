#!/usr/bin/env python

"""
Parse musixmatch dataset in txt format and output a Apache Feather file
where each row is a song and each column is the word count, optionally,
cut the number of words to only output up to the n-th most popular word.
"""
import json
import logging
import argparse
import numpy as np
import pandas as pd
from song_lyrics.transform import bow2vector


def main():
    # instantiate a logger to print useful information about the progress
    logger = logging.getLogger(__name__)

    # config logger to INFO level
    logging.basicConfig(level=logging.INFO)

    # use docstring at the top as description for the script
    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument('path_to_data', type=str,
                        help='Path to the json data')
    parser.add_argument('path_to_output', type=str,
                        help='Output path for the feather file')
    parser.add_argument('--max_words',  default=5000,
                        help='How many words to include (most popular)')

    args = parser.parse_args()
    path_to_data = args.path_to_data
    path_to_output = (args.path_to_output
                      if args.path_to_output.endswith('.feather')
                      else args.path_to_output + '.feather')
    MAX_WORDS = args.max_words

    with open(path_to_data) as f:
        data = json.loads(f.read())

    words = data['words']
    songs = data['songs']

    # how to reduce dimensionality?
    # we don't really need the exact words, we can first cluster words
    # using word embeddings and merge the most similar to avoid working with
    # the 5,000 dimensions

    # get all track ids
    track_ids = [s['track_id'] for s in songs]

    # get all bag of words
    bows = [s['bag_of_words'] for s in songs]

    # create matrix with all the songs up to the 50 most popular word
    X = np.stack([bow2vector(bow, max_words=MAX_WORDS) for bow in bows],
                 axis=0)
    X = X.astype('int16')

    df = pd.DataFrame(X, columns=words)
    df.insert(0, 'track_id', track_ids)

    logger.info('Saving file in {}'.format(path_to_output))
    df.to_feather(path_to_output)


if __name__ == "__main__":
    main()
